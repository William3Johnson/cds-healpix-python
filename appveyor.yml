environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    TWINE_USERNAME: bmatthieu3
    CIBW_BEFORE_BUILD: pip install setuptools-rust
    # Note: TWINE_PASSWORD is set in Appveyor settings
  matrix:
    # Nightly 64-bit MSVC
    - channel: nightly
      target: x86_64-pc-windows-msvc
      PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "64"
      CIBW_SKIP: "*win32* cp33-* cp34-* cp35-* cp36-* cp37-*"
    - channel: nightly
      target: x86_64-pc-windows-msvc
      PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "64"
      CIBW_SKIP: "*win32* cp27-* cp33-* cp35-* cp36-* cp37-*"
    - channel: nightly
      target: x86_64-pc-windows-msvc
      PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"
      CIBW_SKIP: "*win32* cp27-* cp33-* cp34-* cp36-* cp37-*"
    - channel: nightly
      target: x86_64-pc-windows-msvc
      PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"
      CIBW_SKIP: "*win32* cp27-* cp33-* cp34-* cp35-* cp37-*"
    - channel: nightly
      target: x86_64-pc-windows-msvc
      PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "64"
      CIBW_SKIP: "*win32* cp27-* cp33-* cp34-* cp35-* cp36-*"
      # We need to use VS 2017 for compiling spherical-geometry
      # in the build using python 3.7
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    # Nightly 32-bit MSVC
    - channel: nightly
      target: i686-pc-windows-msvc
      PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"
      CIBW_SKIP: "*win_amd64* cp33-* cp34-* cp35-* cp36-* cp37-*"
    - channel: nightly
      target: i686-pc-windows-msvc
      PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "32"
      CIBW_SKIP: "*win_amd64* cp27-* cp33-* cp35-* cp36-* cp37-*"
    - channel: nightly
      target: i686-pc-windows-msvc
      PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"
      CIBW_SKIP: "*win_amd64* cp27-* cp33-* cp34-* cp36-* cp37-*"
    - channel: nightly
      target: i686-pc-windows-msvc
      PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"
      CIBW_SKIP: "*win_amd64* cp27-* cp33-* cp34-* cp35-* cp37-*"
    - channel: nightly
      target: i686-pc-windows-msvc
      PYTHON: "C:\\Python37"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "32"
      CIBW_SKIP: "*win_amd64* cp27-* cp33-* cp34-* cp35-* cp36-*"

install:
  # Install cargo. See: https://github.com/starkat99/appveyor-rust/blob/master/appveyor.yml
  - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init -yv --default-host %target%
  - set PATH=%PATH%;%USERPROFILE%\.cargo\bin
  - rustc -vV
  - cargo -vV
  # Set the path so that the good python version is chosen
  - pip install cibuildwheel==0.10.0 setuptools_rust
  - set PATH=%PYTHON%;%PATH%

build_script:
  # Install python dependencies for running compiling
  # the dynamic library and run the tests
  # Update setuptools so that `python setup.py build_rust` can parse the requirements.txt file
  - python -m pip install setuptools -U
  - python -m pip install -r requirements.txt
  - python -m pip install pytest setuptools-rust 
  # Compile the dynamic library (.pyd on Windows env)
  - python setup.py build_rust
  # Copy the generated library to the python files location
  - xcopy "build\lib\cdshealpix\*.pyd" cdshealpix /sy

test_script:
  # Run the tests
  - python -m pytest -v "cdshealpix\tests\test_healpix.py"
  # Install the dependencies for generating the docs and execute the API tests
  - python -m pip install sphinx numpydoc sphinxcontrib-bibtex matplotlib spherical-geometry
  # Add %PYTHON%\Scripts to the PATH so that make.bat can find sphinx-build
  - set PATH="%PATH%;%PYTHON%\Scripts"
  # Move to the location where the documentation rst files are
  - cd docs
  # Generate the html doc files
  - make docs
  # Run the tests provinded by the API
  - make doctest
  # Move back to the location of the project
  - cd ..


after_test:
  - cibuildwheel --output-dir dist
  # Upload to PyPI if the tests succeed
  - python -m pip install twine
  - python -m twine upload "dist\\*.whl" --skip-existing

artifacts:
  - path: "dist\\*.whl"
    name: Wheels